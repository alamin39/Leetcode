A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.

For example, a string such as "substitution" could be abbreviated as (but not limited to):

"s10n" ("s ubstitutio n")
"sub4u4" ("sub stit u tion")
"12" ("substitution")
"su3i1u2on" ("su bst i t u ti on")
"substitution" (no substrings replaced)
The following are not valid abbreviations:

"s55n" ("s ubsti tutio n", the replaced substrings are adjacent)
"s010n" (has leading zeros)
"s0ubstitution" (replaces an empty substring)
Given a string word and an abbreviation abbr, return whether the string matches the given abbreviation.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: word = "internationalization", abbr = "i12iz4n"
Output: true
Explanation: The word "internationalization" can be abbreviated as "i12iz4n" ("i nternational iz atio n").
Example 2:

Input: word = "apple", abbr = "a2e"
Output: false
Explanation: The word "apple" cannot be abbreviated as "a2e".
 

Constraints:

1 <= word.length <= 20
word consists of only lowercase English letters.
1 <= abbr.length <= 10
abbr consists of lowercase English letters and digits.
All the integers in abbr will fit in a 32-bit integer.


Solution:

class Solution {
public:
    bool validWordAbbreviation(string word, string abbr) {
        if(abbr.size()>word.size()) return 0;
        int j=0,i=0;
        while(i<abbr.size() && j<word.size())
        {
            if(abbr[i]>='a' && abbr[i]<='z')
            {
                if(abbr[i]!=word[j])return 0;
                j++;i++;
            }
            else
            {
                if(abbr[i]=='0')return 0;
                string num="";
                for(int k=i;k<abbr.size();i++,k++)
                {
                    if(abbr[k]>='a' && abbr[k]<='z')break;
                    num+=abbr[k];
                }
                int val = stoi(num);
                if(val>word.size()-j)return 0;
                j+=val;
            }
        }
        return i==abbr.size() && word.size()==j;
    }
};
