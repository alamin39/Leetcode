A permutation perm of n integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the lexicographically smallest permutation perm and return it.

 

Example 1:

Input: s = "I"
Output: [1,2]
Explanation: [1,2] is the only legal permutation that can represented by s, where the number 1 and 2 construct an increasing relationship.
Example 2:

Input: s = "DI"
Output: [2,1,3]
Explanation: Both [2,1,3] and [3,1,2] can be represented as "DI", but since we want to find the smallest lexicographical permutation, you should return [2,1,3]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'. 



class Solution {
public:
    //assume all are 'I', so insert increasing order. 'D' means decreasing, so reverse.
    vector<int> findPermutation(string s) {
       vector<int>vv;
        int n=s.size();
        for(int i=1;i<=n+1;i++)
        {
            vv.emplace_back(i);
        }
        
        int cnt=0,start=-1;
        for(int i=0;i<n;i++)
        {
            if(s[i]=='D')
            {
                if(start==-1)
                    start=i;
                cnt++;
            }
            else if(cnt)
            {
                reverse(vv.begin()+start,vv.begin()+start+cnt+1);
                cnt=0;start=-1;
            }
        }
        if(cnt)
        {
            reverse(vv.begin()+start,vv.begin()+start+cnt+1);
        }
        return vv;
    }
};


Time complexity : 
O(n). The resultant array of size n is traversed atmost three times, in the worst case e.g. "DDDDDD"

Space complexity : 
O(1). Constant extra space is used
