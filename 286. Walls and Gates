You are given an m x n grid rooms initialized with these three possible values.

-1 A wall or an obstacle.
0 A gate.
INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

## Soln:

class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
      int inf=2147483647;
      queue<int>que;
      for(int i=0;i<rooms.size();i++)
      {
          for(int j=0;j<rooms[i].size();j++)
          {
              if(rooms[i][j]==0)
              {
                  que.push(i);
                  que.push(j);
              }
          }
      }  
      int dir[] = {0,1,0,-1,0};
      while(!que.empty())
      {
          int row = que.front();
          que.pop();
          int col = que.front();
          que.pop();
          for(int i=0;i<4;i++)
            {
                if(row+dir[i]>=0 && row+dir[i]<rooms.size() &&
                   col+dir[i+1]>=0 && col+dir[i+1]<rooms[row].size() && 
                   rooms[row+dir[i]][col+dir[i+1]]==inf)
                {
                    rooms[row+dir[i]][col+dir[i+1]] = rooms[row][col]+1;
                    que.push(row+dir[i]);
                    que.push(col+dir[i+1]);
                }
            }
      }
    }
};
