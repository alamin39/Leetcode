In some array arr, the values were in arithmetic progression: the values arr[i + 1] - arr[i] are all equal for every 0 <= i < arr.length - 1.

A value from arr was removed that was not the first or last value in the array.

Given arr, return the removed value.

 

Example 1:

Input: arr = [5,7,11,13]
Output: 9
Explanation: The previous array was [5,7,9,11,13].
Example 2:

Input: arr = [15,13,12]
Output: 14
Explanation: The previous array was [15,14,13,12].
 

Constraints:

3 <= arr.length <= 1000
0 <= arr[i] <= 105
The given array is guaranteed to be a valid array.

------------------------------------

Sol1:

int missingNumber(vector<int>& arr) {
        int diff = (arr.back()-arr[0])/(int)arr.size();
        int start = arr[0];
        for(int i=1;i<arr.size();i++)
        {
            start+=diff;
            if(start!=arr[i])return start;
        }
        return start;
    }
    
 Sol2:
 
    int missingNumber(vector<int>& arr) {
        for(int i=1;i<arr.size();i++)
        {
            if( (arr[i]-arr[i-1]) != (arr[i+1]-arr[i])) {
                if(abs(arr[i]-arr[i-1]) > abs(arr[i+1]-arr[i]))
                    return arr[i-1]+(arr[i+1]-arr[i]);
                return arr[i]+(arr[i]-arr[i-1]);
            }
        }
        return 0;
    }
