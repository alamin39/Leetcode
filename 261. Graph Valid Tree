You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

 

Example 1:


Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true
Example 2:


Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= edges.length <= 5000
edges[i].length == 2
0 <= ai, bi < n
ai != bi
There are no self-loops or repeated edges.


class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
        if(n!=edges.size()+1)return 0;
        
        //In tree, no of edge = no of node - 1 and tree is connected.
        vector<int>graph[n];
        for(vector<int>& edge: edges)
        {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        bool vis[n];
        memset(vis,0,sizeof(vis));
        queue<int>que;
        que.push(0);
        vis[0]=1;
        int cnt=1;
        while(!que.empty())
        {
            int src=que.front();
            que.pop();
            for(int i=0;i<graph[src].size();i++)
            {
                if(vis[graph[src][i]]==0)
                {
                    que.push(graph[src][i]);
                    vis[graph[src][i]]=1;
                    cnt++;
                }
            }
        }
        return cnt==n;
    }
};
